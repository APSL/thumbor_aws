diff --git a/tc_aws/aws/bucket.py b/tc_aws/aws/bucket.py
index 9f50867..71719aa 100644
--- a/tc_aws/aws/bucket.py
+++ b/tc_aws/aws/bucket.py
@@ -4,11 +4,11 @@
 # Use of this source code is governed by the MIT license that can be
 # found in the LICENSE file.
 
-import botocore.session
-
+import session as session_handler
 from tornado_botocore import Botocore
 from tornado.concurrent import return_future
 
+
 class Bucket(object):
     """
     This handles all communication with AWS API
@@ -34,7 +34,9 @@ class Bucket(object):
         :param string path: Path or 'key' to retrieve AWS object
         :param callable callback: Callback function for once the retrieval is done
         """
-        session = Botocore(service='s3', region_name=self._region, operation='GetObject')
+        my_session = session_handler.get_session()
+        session = Botocore(service='s3', region_name=self._region,
+                           operation='GetObject', session=my_session)
         session.call(
             callback=callback,
             Bucket=self._bucket,
@@ -50,7 +52,7 @@ class Bucket(object):
         :param int expiry: URL validity time
         :param callable callback: Called function once done
         """
-        session = botocore.session.get_session()
+        session = session_handler.get_session()
         client  = session.create_client('s3', region_name=self._region)
 
         url = client.generate_presigned_url(
@@ -90,7 +92,9 @@ class Bucket(object):
         if encrypt_key:
             args['ServerSideEncryption'] = 'AES256'
 
-        session = Botocore(service='s3', region_name=self._region, operation='PutObject')
+        my_session = session_handler.get_session()
+        session = Botocore(service='s3', region_name=self._region,
+                           operation='PutObject', session=my_session)
         session.call(**args)
 
     @return_future
@@ -100,7 +104,9 @@ class Bucket(object):
         :param string path: Path or 'key' to delete
         :param callable callback: Called function once done
         """
-        session = Botocore(service='s3', region_name=self._region, operation='DeleteObject')
+        my_session = session_handler.get_session()
+        session = Botocore(service='s3', region_name=self._region,
+                           operation='DeleteObject', session=my_session)
         session.call(
             callback=callback,
             Bucket=self._bucket,
diff --git a/tc_aws/aws/session.py b/tc_aws/aws/session.py
new file mode 100644
index 0000000..9d3c7f5
--- /dev/null
+++ b/tc_aws/aws/session.py
@@ -0,0 +1,11 @@
+import botocore.session
+
+
+session = None
+
+
+def get_session():
+    global session
+    if session is None:
+        session = botocore.session.get_session()
+    return session
